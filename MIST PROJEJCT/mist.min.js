/*

* Copyright (c) MIST JS API 2024 - 2025
* Written by ghgltggamer
* Written date of starting - 23-04-2024

* License
* MIT License

* Copyright (c) 2024 ghgltggamer
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.

*/


// Window class will create a new window and provide the function related to the window

class MIST_Window {
  Wheight;
  Wwidth;
  Wid;
    constructor(title, width, height) {
      this.Wheight = height;
      this.Wwidth = width;
      this.Wid = crypto.randomUUID();
      this.title = title;
      this.width = width;
      this.height = height;
      this.windowElement = null;
      this.titleBar = null;
      this.terminateButton = null;
      this.maximizeButton = null;
      this.minimizeButton = null;
      this.body = null;
      this.draggable = false;
      this.resizable = false;
  
      this.createWindow();
      this.addTitleBar();
      this.addTerminateButton();
      this.addMaximizeButton();
      this.addMinimizeButton();
      this.addBody();
      this.addEventListeners();
    }
  
    createWindow() {
      this.windowElement = document.createElement('div');
      this.windowElement.classList.add('mist-window');
      this.windowElement.style.width = this.width + 'px';
      this.windowElement.style.height = this.height + 'px';
      this.windowElement.style.position = 'absolute';
      this.windowElement.style.backgroundColor = '#f0f0f0';
      this.windowElement.style.border = '1px solid #ccc';
      document.body.appendChild(this.windowElement);
    }
  
    addTitleBar() {
      this.titleBar = document.createElement('div');
      this.titleBar.classList.add('mist-title-bar');
      this.titleBar.style.width = '100%';
      this.titleBar.style.height = '30px';
      this.titleBar.style.backgroundColor = '#ddd';
      this.titleBar.style.cursor = 'move';
      this.titleBar.innerHTML = this.title;
      this.windowElement.appendChild(this.titleBar);
    }
  
    addTerminateButton() {
      this.terminateButton = document.createElement('button');
      this.terminateButton.classList.add('mist-terminate-button');
      this.terminateButton.style.position = 'absolute';
      this.terminateButton.style.top = '5px';
      this.terminateButton.style.right = '5px';
      this.terminateButton.style.width = '20px';
      this.terminateButton.style.height = '20px';
      this.terminateButton.style.backgroundColor = 'red';
      this.terminateButton.style.border = 'none';
      this.terminateButton.style.color = 'white';
      this.terminateButton.style.fontWeight = 'bold';
      this.terminateButton.innerHTML = 'X';
      this.windowElement.appendChild(this.terminateButton);
    }
  
    addMaximizeButton() {
      this.maximizeButton = document.createElement('button');
      this.maximizeButton.classList.add('mist-maximize-button');
      this.maximizeButton.style.position = 'absolute';
      this.maximizeButton.style.top = '5px';
      this.maximizeButton.style.right = '55px';
      this.maximizeButton.style.width = '20px';
      this.maximizeButton.style.height = '20px';
      this.maximizeButton.style.backgroundColor = '#007bff';
      this.maximizeButton.style.border = 'none';
      this.maximizeButton.style.color = 'white';
      this.maximizeButton.style.fontWeight = 'bold';
      this.maximizeButton.innerHTML = '+';
      this.windowElement.appendChild(this.maximizeButton);
    }
  
    addMinimizeButton() {
      this.minimizeButton = document.createElement('button');
      this.minimizeButton.classList.add('mist-minimize-button');
      this.minimizeButton.style.position = 'absolute';
      this.minimizeButton.style.top = '5px';
      this.minimizeButton.style.right = '30px';
      this.minimizeButton.style.width = '20px';
      this.minimizeButton.style.height = '20px';
      this.minimizeButton.style.backgroundColor = '#28a745';
      this.minimizeButton.style.border = 'none';
      this.minimizeButton.style.color = 'white';
      this.minimizeButton.style.fontWeight = 'bold';
      this.minimizeButton.innerHTML = '-';
      this.windowElement.appendChild(this.minimizeButton);
    }

    terminateWindow(){
      this.windowElement.remove();
    }
  
    addBody() {
      this.body = document.createElement('div');
      this.body.classList.add('mist-body');
      this.body.style.width = '100%';
      this.body.style.height = 'calc(100% - 30px)';
      this.body.style.overflow = 'auto';
      this.windowElement.appendChild(this.body);
    }
  
    setContent(htmlContent) {
      this.body.innerHTML = htmlContent;
    }

    setFont(fontName){
        this.body.style.fontFamily = fontName;
    }

    setBackground(url){
        this.body.style.background = url;
    }

    setTextColor(color){
        this.body.style.color = color;
    }

    getHtmlId(){
      return this.windowElement.id;
    }
  
    addEventListeners() {
      // adding the id to the window
      this.windowElement.id = this.Wid;
      // Make the window draggable
      this.titleBar.addEventListener('mousedown', (event) => {
        this.draggable = true;
        this.offsetX = event.clientX - this.windowElement.getBoundingClientRect().left;
        this.offsetY = event.clientY - this.windowElement.getBoundingClientRect().top;
      });
  
      document.addEventListener('mouseup', () => {
        this.draggable = false;
      });
  
      document.addEventListener('mousemove', (event) => {
        if (this.draggable) {
          this.windowElement.style.left = (event.clientX - this.offsetX) + 'px';
          this.windowElement.style.top = (event.clientY - this.offsetY) + 'px';
        }
      });
  
      // Make the window resizable
      this.windowElement.addEventListener('mousedown', (event) => {
        if (
          event.clientX > this.windowElement.getBoundingClientRect().right - 10 &&
          event.clientY > this.windowElement.getBoundingClientRect().bottom - 10
        ) {
          this.resizable = true;
          this.initWidth = this.windowElement.offsetWidth;
          this.initHeight = this.windowElement.offsetHeight;
          this.startX = event.clientX;
          this.startY = event.clientY;
        }
      });
  
      document.addEventListener('mousemove', (event) => {
        if (this.resizable) {
          const newWidth = this.initWidth + (event.clientX - this.startX);
          const newHeight = this.initHeight + (event.clientY - this.startY);
          this.windowElement.style.width = newWidth + 'px';
          this.windowElement.style.height = newHeight + 'px';
          this.body.style.height = 'calc(100% - 30px)';
        }
      });
  
      document.addEventListener('mouseup', () => {
        this.resizable = false;
      });
  
      // Terminate button functionality
      this.terminateButton.addEventListener('click', () => {
        this.windowElement.remove();
      });
  
      // Maximize button functionality
      this.maximizeButton.addEventListener('click', () => {
        if (this.windowElement.style.width === '100%' && this.windowElement.style.height === '100%') {
          this.windowElement.style.width = this.width + 'px';
          this.windowElement.style.height = this.height + 'px';
          this.body.style.height = 'calc(100% - 30px)';
        } else {
          this.windowElement.style.width = '100%';
          this.windowElement.style.height = '100%';
          this.body.style.height = 'calc(100% - 30px)';
        }
      });
  
      // Minimize button functionality
      this.minimizeButton.addEventListener('click', () => {
        // this.windowElement.style.display = 'none';
        this.windowElement.style.height = this.Wheight + 'px';
        this.windowElement.style.width = this.Wwidth + 'px';
      });
    }
  }






// MIRROR WINDOW will render an HTML file or a website from url or path as it's content
class MIST_Mirror_Window {
  Wheight;
  Wwidth;
  Wid;
  constructor(title, width, height, contentUrl) {
    this.Wheight = height;
    this.Wwdith = width;
    this.Wid = crypto.randomUUID();
    this.title = title;
    this.width = width;
    this.height = height;
    this.contentUrl = contentUrl;
    this.windowElement = null;
    this.titleBar = null;
    this.terminateButton = null;
    this.maximizeButton = null;
    this.minimizeButton = null;
    this.iframe = null;
    this.draggable = false;
    this.resizable = false;

    this.createWindow();
    this.addTitleBar();
    this.addTerminateButton();
    this.addMaximizeButton();
    this.addMinimizeButton();
    this.addIframe();
    this.addEventListeners();
  }

  createWindow() {
    this.windowElement = document.createElement('div');
    this.windowElement.classList.add('mist-window');
    this.windowElement.style.width = this.width + 'px';
    this.windowElement.style.height = this.height + 'px';
    this.windowElement.style.position = 'absolute';
    this.windowElement.style.backgroundColor = '#f0f0f0';
    this.windowElement.style.border = '1px solid #ccc';
    document.body.appendChild(this.windowElement);
  }

  addTitleBar() {
    this.titleBar = document.createElement('div');
    this.titleBar.classList.add('mist-title-bar');
    this.titleBar.style.width = '100%';
    this.titleBar.style.height = '30px';
    this.titleBar.style.backgroundColor = '#ddd';
    this.titleBar.style.cursor = 'move';
    this.titleBar.innerHTML = this.title;
    this.windowElement.appendChild(this.titleBar);
  }

  addTerminateButton() {
    this.terminateButton = document.createElement('button');
    this.terminateButton.classList.add('mist-terminate-button');
    this.terminateButton.style.position = 'absolute';
    this.terminateButton.style.top = '5px';
    this.terminateButton.style.right = '5px';
    this.terminateButton.style.width = '20px';
    this.terminateButton.style.height = '20px';
    this.terminateButton.style.backgroundColor = 'red';
    this.terminateButton.style.border = 'none';
    this.terminateButton.style.color = 'white';
    this.terminateButton.style.fontWeight = 'bold';
    this.terminateButton.innerHTML = 'X';
    this.windowElement.appendChild(this.terminateButton);
  }

  addMaximizeButton() {
    this.maximizeButton = document.createElement('button');
    this.maximizeButton.classList.add('mist-maximize-button');
    this.maximizeButton.style.position = 'absolute';
    this.maximizeButton.style.top = '5px';
    this.maximizeButton.style.right = '55px';
    this.maximizeButton.style.width = '20px';
    this.maximizeButton.style.height = '20px';
    this.maximizeButton.style.backgroundColor = '#007bff';
    this.maximizeButton.style.border = 'none';
    this.maximizeButton.style.color = 'white';
    this.maximizeButton.style.fontWeight = 'bold';
    this.maximizeButton.innerHTML = '+';
    this.windowElement.appendChild(this.maximizeButton);
  }

  addMinimizeButton() {
    this.minimizeButton = document.createElement('button');
    this.minimizeButton.classList.add('mist-minimize-button');
    this.minimizeButton.style.position = 'absolute';
    this.minimizeButton.style.top = '5px';
    this.minimizeButton.style.right = '30px';
    this.minimizeButton.style.width = '20px';
    this.minimizeButton.style.height = '20px';
    this.minimizeButton.style.backgroundColor = '#28a745';
    this.minimizeButton.style.border = 'none';
    this.minimizeButton.style.color = 'white';
    this.minimizeButton.style.fontWeight = 'bold';
    this.minimizeButton.innerHTML = '-';
    this.windowElement.appendChild(this.minimizeButton);
  }

  addIframe() {
    this.iframe = document.createElement('iframe');
    this.iframe.style.width = '100%';
    this.iframe.style.height = 'calc(100% - 30px)';
    this.iframe.style.border = 'none';
    this.iframe.src = this.contentUrl;
    this.windowElement.appendChild(this.iframe);
  }

  terminateWindow(){
    this.windowElement.remove();
  }

  getHtmlId(){
    return this.windowElement.id;
  }

  addEventListeners() {
    // Using Wid
    this.windowElement.id = this.Wid;
    // Make the window draggable
    this.titleBar.addEventListener('mousedown', (event) => {
      this.draggable = true;
      this.offsetX = event.clientX - this.windowElement.getBoundingClientRect().left;
      this.offsetY = event.clientY - this.windowElement.getBoundingClientRect().top;
    });

    document.addEventListener('mouseup', () => {
      this.draggable = false;
    });

    document.addEventListener('mousemove', (event) => {
      if (this.draggable) {
        this.windowElement.style.left = (event.clientX - this.offsetX) + 'px';
        this.windowElement.style.top = (event.clientY - this.offsetY) + 'px';
      }
    });

    // Make the window resizable
    this.windowElement.addEventListener('mousedown', (event) => {
      if (
        event.clientX > this.windowElement.getBoundingClientRect().right - 10 &&
        event.clientY > this.windowElement.getBoundingClientRect().bottom - 10
      ) {
        this.resizable = true;
        this.initWidth = this.windowElement.offsetWidth;
        this.initHeight = this.windowElement.offsetHeight;
        this.startX = event.clientX;
        this.startY = event.clientY;
      }
    });

    document.addEventListener('mousemove', (event) => {
      if (this.resizable) {
        const newWidth = this.initWidth + (event.clientX - this.startX);
        const newHeight = this.initHeight + (event.clientY - this.startY);
        this.windowElement.style.width = newWidth + 'px';
        this.windowElement.style.height = newHeight + 'px';
        this.iframe.style.height = 'calc(100% - 30px)';
      }
    });

    document.addEventListener('mouseup', () => {
      this.resizable = false;
    });

    // Terminate button functionality
    this.terminateButton.addEventListener('click', () => {
      this.windowElement.remove();
    });

    // Maximize button functionality
    this.maximizeButton.addEventListener('click', () => {
      if (this.windowElement.style.width === '100%' && this.windowElement.style.height === '100%') {
        this.windowElement.style.width = this.width + 'px';
        this.windowElement.style.height = this.height + 'px';
        this.iframe.style.height = 'calc(100% - 30px)';
      } else {
        this.windowElement.style.width = '100%';
        this.windowElement.style.height = '100%';
        this.iframe.style.height = 'calc(100% - 30px)';
      }
    });

    // Minimize button functionality
    this.minimizeButton.addEventListener('click', () => {
      // this.windowElement.style.display = 'none';
      this.windowElement.style.height = this.Wheight + 'px';
      this.windowElement.style.width = this.Wwidth + 'px';
    });
  }
}

// Usage
//const mirrorWindow = new MIST_Mirror_Window("Mirror Window", 800, 600, "https://www.example.com");










// class MIST_Panel_Left{
//   Pelm;
//   PLeml;
//   constructor(text, theme, padding, location = "10110kakn10nqd-192dm"){
//     if (location === "10110kakn10nqd-192dm"){
//       var get = document.getElementById(location);
//       this.Pelm = get;
//       var uid = crypto.randomUUID();
//       get.innerHTML += '<div class="MIST-Panel-Left" id="' + uid + '" style="background-color: rgba(' + theme + ', 0.2);border-left-color: rgb(' + theme + ');padding: ' + padding + 'px;">' + text + '</div>';
//       this.PLeml = document.getElementById(uid);
//     }else{
//       var get = document.body;
//       this.Pelm = get;
//       var uid = crypto.randomUUID();
//       get.innerHTML += '<div class="MIST-Panel-Left" id="' + uid + '" style="background-color: rgba(' + theme + ', 0.2);border-left-color: rgb(' + theme + ');padding: ' + padding + 'px;">' + text + '</div>';
//       this.PLeml = document.getElementById(uid);
//     }
//   }
// }





// MIST_Panel_Left function will create a panel and provide you dynamic functions and customisation
function MIST_Panel_Left(text, theme = '0, 128, 0', padding = 10, location = 110011011101){
  var uid = crypto.randomUUID();
  if (location != 110011011101){
    var get = document.getElementById(location);
    // this.Pelm = get;
    get.innerHTML += '<div class="MIST-Panel-Left" id="' + uid + '" style="background-color: rgba(' + theme + ', 0.2);border-color: rgb(' + theme + ');padding: ' + padding + 'px;">' + text + '</div>';
    // this.PLeml = document.getElementById(uid);
  }
  else{
    // var get = document.body;
    // this.Pelm = get;
    // var uid = crypto.randomUUID();
    document.body.innerHTML += '<div class="MIST-Panel-Left" id="' + uid + '" style="background-color: rgba(' + theme + ', 0.2);border-color: rgb(' + theme + ');padding: ' + padding + 'px;">' + text + '</div>';
    // this.PLeml = document.getElementById(uid);
  }
  return {
    
    font(font){
      document.getElementById(uid).style.fontFamily = font;
    },
    borderColor(color){
      document.getElementById(uid).style.borderTopColor = color;
      document.getElementById(uid).style.borderBottomColor = color;
      document.getElementById(uid).style.borderRightColor = color;
    },
    LeftColor(color){
      document.getElementById(uid).style.borderLeftColor = color;
    },
    padding(px){
      document.getElementById(uid).style.padding = px+'px';
    },
    theme(rgb){
      var finalise = 'rgb(' + rgb + ')';
      var finalised = 'rgb(' + rgb + ', 0.2)';
      document.getElementById(uid).style.borderColor = finalise;
      document.getElementById(uid).style.backgroundColor = finalised;
    },
    textColor(color){
      document.getElementById(uid).style.color = color;
    },
    text(html){
      document.getElementById(uid).innerHTML = html;
    },
    getHtmlId(){
      return uid;
    }
  }

}

// Usage :- const new_Panel = new MIST_Panel_Left('this is example panel');
// Access mehods :- new_Panel.method_name(); eg: new_Panel.font('Raleway'); :- Check out mist.min.css for all the installed font package came with MIST API












// MIST Animation will add the animation to the given element
class MIST_Animation {
  constructor(element) {
    this.element = element;
  }

  fadeIn(duration = 1000, callback) {
    this.element.style.opacity = 0;
    this.element.style.transition = `opacity ${duration}ms ease`;

    // Start fade in animation
    setTimeout(() => {
      this.element.style.opacity = 1;
      // Call the callback after the animation duration
      if (typeof callback === 'function') {
        setTimeout(callback, duration);
      }
    }, 10);
  }

  fadeOut(duration = 1000, callback) {
    this.element.style.opacity = 1;
    this.element.style.transition = `opacity ${duration}ms ease`;

    // Start fade out animation
    setTimeout(() => {
      this.element.style.opacity = 0;
      // Call the callback after the animation duration
      if (typeof callback === 'function') {
        setTimeout(callback, duration);
      }
    }, 10);
  }



  pop(duration = 500, callback) {
    // Apply initial scale
    this.element.style.transform = 'scale(0)';
    this.element.style.transition = `transform ${duration}ms cubic-bezier(0.68, -0.55, 0.27, 1.55)`;

    // Start pop animation
    setTimeout(() => {
      this.element.style.transform = 'scale(1)';
      // Call the callback after the animation duration
      if (typeof callback === 'function') {
        setTimeout(callback, duration);
      }
    }, 10);
  }
}















// MIST Canvas will create canvas based on the arguments
function MIST_Canvas(content = "MIST CANVAS", name = ('MIST_Canvas_' + crypto.randomUUID()), location = 1100110101){

  if (location == 1100110101){
    document.body.innerHTML += '<div class="MIST-Canvas" id="' + name + '">' + content + '</div>';


  }
  else {
    document.getElementById(location).innerHTML += '<div class="MIST-Canvas" id="' + name + '">' + content + '</div>';


  }


  return {
    height(px){
      var bin = px+'px';
      document.getElementById(name).style.height = bin;
    },
    width(px){
      var bin = px+'px';
      document.getElementById(name).style.width = bin;
    },
    textColor(color){
      document.getElementById(name).style.color = color;
    },
    backgroundColor(color){
      document.getElementById(name).style.backgroundColor = color;
    },
    backgroundImage(path){
      var bin = 'url("'+path+'")';
      document.getElementById(name).style.backgroundImage = bin;
    },
    backgroundGradient(type, colors){
      var bin = type+'-gradient("'+colors+'")';
      document.getElementById(name).style.backgroundImage = bin;
    },
    font(fontN){
      document.getElementById(name).style.fontFamily = fontN;
    },
    getHtmlId(){
      return name;
    },
    addContent(html){
      document.getElementById(name).innerHTML = html;
    },
    addBreak(){
      document.getElementById(name).innerHTML = '<br>';
    }
  }

}


















// Freezed MIST Window will make a freezed mist window which will never moved
class MIST_Freezed_Window {
  Wheight;
  Wwidth;
  Wid;
  constructor(containerId, title, width, height) {
    this.container = document.getElementById(containerId);
    if (!this.container) {
      console.error(`Container element with ID '${containerId}' not found.`);
      return;
    }
    this.Wheight = height;
    this.Wwidth = width;
    this.Wid = crypto.randomUUID();
    this.title = title;
    this.width = width;
    this.height = height;
    this.windowElement = null;
    this.titleBar = null;
    this.terminateButton = null;
    this.maximizeButton = null;
    this.minimizeButton = null;
    this.body = null;
    this.draggable = false;
    this.resizable = false;

    this.createWindow();
    this.addTitleBar();
    this.addTerminateButton();
    this.addMaximizeButton();
    this.addMinimizeButton();
    this.addBody();
    this.addEventListeners();
  }

  createWindow() {
    this.windowElement = document.createElement('div');
    this.windowElement.classList.add('mist-window');
    this.windowElement.style.width = this.width + 'px';
    this.windowElement.style.height = this.height + 'px';
    this.windowElement.style.position = 'absolute';
    this.windowElement.style.backgroundColor = '#f0f0f0';
    this.windowElement.style.border = '1px solid #ccc';
    this.container.appendChild(this.windowElement);
  }

  addTitleBar() {
    this.titleBar = document.createElement('div');
    this.titleBar.classList.add('mist-title-bar');
    this.titleBar.style.width = '100%';
    this.titleBar.style.height = '30px';
    this.titleBar.style.backgroundColor = '#ddd';
    this.titleBar.style.cursor = 'move';
    this.titleBar.innerHTML = this.title;
    this.windowElement.appendChild(this.titleBar);
  }

  addTerminateButton() {
    this.terminateButton = document.createElement('button');
    this.terminateButton.classList.add('mist-terminate-button');
    this.terminateButton.style.position = 'absolute';
    this.terminateButton.style.top = '5px';
    this.terminateButton.style.right = '5px';
    this.terminateButton.style.width = '20px';
    this.terminateButton.style.height = '20px';
    this.terminateButton.style.backgroundColor = 'red';
    this.terminateButton.style.border = 'none';
    this.terminateButton.style.color = 'white';
    this.terminateButton.style.fontWeight = 'bold';
    this.terminateButton.innerHTML = 'X';
    this.windowElement.appendChild(this.terminateButton);
  }

  addMaximizeButton() {
    this.maximizeButton = document.createElement('button');
    this.maximizeButton.classList.add('mist-maximize-button');
    this.maximizeButton.style.position = 'absolute';
    this.maximizeButton.style.top = '5px';
    this.maximizeButton.style.right = '55px';
    this.maximizeButton.style.width = '20px';
    this.maximizeButton.style.height = '20px';
    this.maximizeButton.style.backgroundColor = '#007bff';
    this.maximizeButton.style.border = 'none';
    this.maximizeButton.style.color = 'white';
    this.maximizeButton.style.fontWeight = 'bold';
    this.maximizeButton.innerHTML = '+';
    this.windowElement.appendChild(this.maximizeButton);
  }

  addMinimizeButton() {
    this.minimizeButton = document.createElement('button');
    this.minimizeButton.classList.add('mist-minimize-button');
    this.minimizeButton.style.position = 'absolute';
    this.minimizeButton.style.top = '5px';
    this.minimizeButton.style.right = '30px';
    this.minimizeButton.style.width = '20px';
    this.minimizeButton.style.height = '20px';
    this.minimizeButton.style.backgroundColor = '#28a745';
    this.minimizeButton.style.border = 'none';
    this.minimizeButton.style.color = 'white';
    this.minimizeButton.style.fontWeight = 'bold';
    this.minimizeButton.innerHTML = '-';
    this.windowElement.appendChild(this.minimizeButton);
  }

  terminateWindow() {
    this.windowElement.remove();
  }

  addBody() {
    this.body = document.createElement('div');
    this.body.classList.add('mist-body');
    this.body.style.width = '100%';
    this.body.style.height = 'calc(100% - 30px)';
    this.body.style.overflow = 'auto';
    this.windowElement.appendChild(this.body);
  }

  setContent(htmlContent) {
    this.body.innerHTML = htmlContent;
  }

  setFont(fontName) {
    this.body.style.fontFamily = fontName;
  }

  setBackground(url) {
    this.body.style.background = url;
  }

  setTextColor(color) {
    this.body.style.color = color;
  }

  getHtmlId(){
    return this.windowElement.id;
  }

  addEventListeners() {
    // Wid
    this.windowElement.id = this.Wid;

    // Make the widow undraggable

    // Terminate button functionality
    this.terminateButton.addEventListener('click', () => {
      this.windowElement.remove();
    });

    // Maximize button functionality
    this.maximizeButton.addEventListener('click', () => {
      if (this.windowElement.style.width === '100%' && this.windowElement.style.height === '100%') {
        this.windowElement.style.width = this.width + 'px';
        this.windowElement.style.height = this.height + 'px';
        this.body.style.height = 'calc(100% - 30px)';
      } else {
        this.windowElement.style.width = '100%';
        this.windowElement.style.height = '100%';
        this.body.style.height = 'calc(100% - 30px)';
      }
    });

    // Minimize button functionality
    this.minimizeButton.addEventListener('click', () => {
      // this.windowElement.style.display = 'none';
      this.windowElement.style.height = this.Wheight + 'px';
      this.windowElement.style.width = this.Wwidth + 'px';
    });
  }
}








class MIST_Freezed_Mirror_Window {
  Wheight;
  Wwidth;
  Wid;
  constructor(containerId, title, width, height, contentUrl) {
    this.container = document.getElementById(containerId);
    if (!this.container) {
      console.error(`Container element with ID '${containerId}' not found.`);
      return;
    }
    this.Wheight = height;
    this.Wwidth = width;
    this.Wid = crypto.randomUUID();
    this.title = title;
    this.width = width;
    this.contentUrl = contentUrl;
    this.height = height;
    this.windowElement = null;
    this.titleBar = null;
    this.terminateButton = null;
    this.maximizeButton = null;
    this.minimizeButton = null;
    this.body = null;
    this.draggable = false;
    this.resizable = false;

    this.createWindow();
    this.addTitleBar();
    this.addTerminateButton();
    this.addMaximizeButton();
    this.addMinimizeButton();
    this.addBody();
    this.addIframe();
    this.addEventListeners();
  }

  createWindow() {
    this.windowElement = document.createElement('div');
    this.windowElement.classList.add('mist-window');
    this.windowElement.style.width = this.width + 'px';
    this.windowElement.style.height = this.height + 'px';
    this.windowElement.style.position = 'absolute';
    this.windowElement.style.backgroundColor = '#f0f0f0';
    this.windowElement.style.border = '1px solid #ccc';
    this.container.appendChild(this.windowElement);
  }

  addTitleBar() {
    this.titleBar = document.createElement('div');
    this.titleBar.classList.add('mist-title-bar');
    this.titleBar.style.width = '100%';
    this.titleBar.style.height = '30px';
    this.titleBar.style.backgroundColor = '#ddd';
    this.titleBar.style.cursor = 'move';
    this.titleBar.innerHTML = this.title;
    this.windowElement.appendChild(this.titleBar);
  }

  addTerminateButton() {
    this.terminateButton = document.createElement('button');
    this.terminateButton.classList.add('mist-terminate-button');
    this.terminateButton.style.position = 'absolute';
    this.terminateButton.style.top = '5px';
    this.terminateButton.style.right = '5px';
    this.terminateButton.style.width = '20px';
    this.terminateButton.style.height = '20px';
    this.terminateButton.style.backgroundColor = 'red';
    this.terminateButton.style.border = 'none';
    this.terminateButton.style.color = 'white';
    this.terminateButton.style.fontWeight = 'bold';
    this.terminateButton.innerHTML = 'X';
    this.windowElement.appendChild(this.terminateButton);
  }

  addMaximizeButton() {
    this.maximizeButton = document.createElement('button');
    this.maximizeButton.classList.add('mist-maximize-button');
    this.maximizeButton.style.position = 'absolute';
    this.maximizeButton.style.top = '5px';
    this.maximizeButton.style.right = '55px';
    this.maximizeButton.style.width = '20px';
    this.maximizeButton.style.height = '20px';
    this.maximizeButton.style.backgroundColor = '#007bff';
    this.maximizeButton.style.border = 'none';
    this.maximizeButton.style.color = 'white';
    this.maximizeButton.style.fontWeight = 'bold';
    this.maximizeButton.innerHTML = '+';
    this.windowElement.appendChild(this.maximizeButton);
  }

  addMinimizeButton() {
    this.minimizeButton = document.createElement('button');
    this.minimizeButton.classList.add('mist-minimize-button');
    this.minimizeButton.style.position = 'absolute';
    this.minimizeButton.style.top = '5px';
    this.minimizeButton.style.right = '30px';
    this.minimizeButton.style.width = '20px';
    this.minimizeButton.style.height = '20px';
    this.minimizeButton.style.backgroundColor = '#28a745';
    this.minimizeButton.style.border = 'none';
    this.minimizeButton.style.color = 'white';
    this.minimizeButton.style.fontWeight = 'bold';
    this.minimizeButton.innerHTML = '-';
    this.windowElement.appendChild(this.minimizeButton);
  }

  terminateWindow() {
    this.windowElement.remove();
  }

  addBody() {
    this.body = document.createElement('div');
    this.body.classList.add('mist-body');
    this.body.style.width = '100%';
    this.body.style.height = 'calc(100% - 30px)';
    this.body.style.overflow = 'auto';
    this.windowElement.appendChild(this.body);
  }

  addIframe() {
    this.iframe = document.createElement('iframe');
    this.iframe.style.width = '100%';
    this.iframe.style.height = 'calc(100% - 30px)';
    this.iframe.style.border = 'none';
    this.iframe.src = this.contentUrl;
    this.windowElement.appendChild(this.iframe);
  }

  setContent(htmlContent) {
    this.body.innerHTML = htmlContent;
  }

  setFont(fontName) {
    this.body.style.fontFamily = fontName;
  }

  setBackground(url) {
    this.body.style.background = url;
  }

  setTextColor(color) {
    this.body.style.color = color;
  }

  getHtmlId(){
    return this.windowElement.id;
  }

  addEventListeners() {
    // Wid
    this.windowElement.id = this.Wid;

    // Make the widow undraggable

    // Terminate button functionality
    this.terminateButton.addEventListener('click', () => {
      this.windowElement.remove();
    });

    // Maximize button functionality
    this.maximizeButton.addEventListener('click', () => {
      if (this.windowElement.style.width === '100%' && this.windowElement.style.height === '100%') {
        this.windowElement.style.width = this.width + 'px';
        this.windowElement.style.height = this.height + 'px';
        this.body.style.height = 'calc(100% - 30px)';
      } else {
        this.windowElement.style.width = '100%';
        this.windowElement.style.height = '100%';
        this.body.style.height = 'calc(100% - 30px)';
      }
    });

    // Minimize button functionality
    this.minimizeButton.addEventListener('click', () => {
      // this.windowElement.style.display = 'none';
      this.windowElement.style.height = this.Wheight + 'px';
      this.windowElement.style.width = this.Wwidth + 'px';
    });
  }
}












// MIST Style Element will style the given element through it's id
function MIST_Style_Element(id){
  var el = document.getElementById(id).style;
  return {
    background(bg){
      el.backgroundColor(bg);
    },
    textColor(color){
      el.color = color;
    },
    height(px){
      el.height = (px+'px');
    },
    width(px){
      el.width = (px+'px');
    },
    paddingLeft(px){
      el.paddingLeft = (px+'px');

    },
    paddingRight(px){
      el.paddingRight = (px+'px');
    },
    paddingTop(px){
      el.paddingTop = (px+'px');
    },
    paddingBottom(px){
      el.paddingBottom = (px+'px');
    },
    marginLeft(px){
      el.marginLeft = (px+'px');

    },
    marginRight(px){
      el.marginRight = (px+'px');
    },
    marginTop(px){
      el.marginTop = (px+'px');
    },
    marginBottom(px){
      el.marginBottom = (px+'px');
    },
    dropShadow(x,y,blur){

      var bin = x+'px '+y+'px '+blur+'px rgba(0, 0, 0, 0.5);';
      el.boxShadow = bin;
      el.textShadow = bin;
    }
  }
}













// MIST Widget will provide you basic but mot important and used widgets in various types of application, if you want to make mordern and high end widgets then use the next class after this MIST NTL WIDGETS those are maded for mordern UI
class MIST_Widgets{
  Wid;

  textbox(location = 1100110, placeholder="Enter Text..."){

    this.Wid = crypto.randomUUID();
    if (location === 1100110){

      var textbox = document.body.innerHTML += '<textarea class="MIST-Widget-Textbox" placeholder="' + placeholder + '" id="' + this.Wid + '"></textarea>';

    }
    else {

      var textbox = document.getElementById(location).innerHTML += '<textarea class="MIST-Widget-Textbox" placeholder="' + placeholder + '" id="' + this.Wid + '"></textarea>';

    }

    return this.Wid;
  }



  input(location = 1100110, placeholder="Enter Text..."){

    this.Wid = crypto.randomUUID();
    if (location === 1100110){

      var textbox = document.body.innerHTML += '<input type="text" name="text" class="MIST-Widget-Textbox" placeholder="' + placeholder + '" id="' + this.Wid + '">';

    }
    else {

      var textbox = document.getElementById(location).innerHTML += '<input type="text" name="text" class="MIST-Widget-Textbox" placeholder="' + placeholder + '" id="' + this.Wid + '">';

    }

    return this.Wid;
  }





  button(location = 1100110, placeholder="MIST Button", onclick){

    this.Wid = crypto.randomUUID();
    if (location === 1100110){

      var textbox = document.body.innerHTML += '<button class="MIST-Widget-Button" id="' + this.Wid + '" onclick="' + onclick + '">' + placeholder + '</button>';

    }
    else {

      // var textbox = document.getElementById(location).innerHTML += '<input type="text" name="text" class="MIST-Widget-Textbox" placeholder="' + placeholder + '" id="' + this.Wid + '">';
      var textbox = document.getElementById(location).innerHTML += '<button class="MIST-Widget-Button" id="' + this.Wid + '" onclick="' + onclick + '">' + placeholder + '</button>';


    }

    return this.Wid;
  }
}





// MIST NTL WIDGETS is a grouped class of the mordern widgets methods for stunning ui use this 
class MIST_NTL_Widgets{
  Wid;

  NTL_Textbox(location = 1100110, placeholder="Enter Text..."){

    this.Wid = crypto.randomUUID();
    if (location === 1100110){

      var textbox = document.body.innerHTML += '<textarea class="MIST-NTL-Widget-Textbox" placeholder="' + placeholder + '" id="' + this.Wid + '"></textarea>';

    }
    else {

      var textbox = document.getElementById(location).innerHTML += '<textarea class="MIST-NTL-Widget-Textbox" placeholder="' + placeholder + '" id="' + this.Wid + '"></textarea>';

    }

    return this.Wid;
  }




  NTL_Input(location = 1100110, placeholder="Enter Text..."){

    this.Wid = crypto.randomUUID();
    if (location === 1100110){

      var textbox = document.body.innerHTML += '<input type="text" name="text" class="MIST-NTL-Widget-Textbox" style="height: 20px;width: 92%;" placeholder="' + placeholder + '" id="' + this.Wid + '">';

    }
    else {

      var textbox = document.getElementById(location).innerHTML += '<input type="text" name="text" class="MIST-NTL-Widget-Textbox" style="height: 20px;width: 92%;" placeholder="' + placeholder + '" id="' + this.Wid + '">';

    }

    return this.Wid;
  }






  NTL_Button(location = 1100110, placeholder="Enter Text...", onclick){

    this.Wid = crypto.randomUUID();
    if (location === 1100110){

      var textbox = document.body.innerHTML += '<button class="MIST-NTL-Widget-Button" id="' + this.Wid + '" onclick="' + onclick + '">' + placeholder + '</button>';

    }
    else {

      // var textbox = document.getElementById(location).innerHTML += '<input type="text" name="text" class="MIST-Widget-Textbox" placeholder="' + placeholder + '" id="' + this.Wid + '">';
      var textbox = document.getElementById(location).innerHTML += '<button class="MIST-NTL-Widget-Button" id="' + this.Wid + '" onclick="' + onclick + '">' + placeholder + '</button>';


    }

    return this.Wid;
  }
} 














// MIST Load From File is a essential function for making a website which does not re loads for anchouring web pages
function MIST_Load_From_File(path) {
  // Remove all content from the current page
  document.body.innerHTML = '';

  // Create a new iframe
  var iframe = document.createElement('iframe');
  iframe.style.width = '100%';
  iframe.style.height = '100vh';
  iframe.frameBorder = '0';
  document.body.appendChild(iframe);
  document.body.style.margin = '0px';
  document.body.style.padding = '0px';

  // Set the src attribute of the iframe to the provided HTML file's path
  iframe.src = path;
}










// MIST Insert HTML Will insert the html to the location
function MIST_Insert_Html(location, HTML){
  document.getElementById(location).innerHTML += HTML;
}